#!/bin/bash
#PBS -q hpcintro
#PBS -l feature=XeonX5550
#PBS -l walltime=3:40:00
#PBS -N log
#PBS -m bae
#PBS -M s140882@student.dtu.dk
LOOPS=10000
OPTS=("nat" "lib" "blk" "nmk" "nkm" "mnk" "mkn" "kmn" "knm") 
LOGEXT=dat
/bin/rm -f *.$LOGEXT
count=0
echo $CPUTYPE
cd "$PBS_O_WORKDIR"
for mode in "${OPTS[@]}"
do
	n=100
	while [ $n -lt 7000 ] 
	do
	m=100
		while [ $m -lt 7000 ]
		do	
		k=100
			while [ $k -lt 7000 ]
			do
			if [ "$mode" = "blk" ]
				then
					./matmult_c.studio $mode $m $n $k 20  >> "X$mode"."$LOGEXT"
				else	
					./matmult_c.studio $mode $m $n $k     >> "X$mode"."$LOGEXT"
				fi
			k=$(($k+2000))
			count=$(($count+1))
			done
		m=$(($m+2000))
		echo "I have done $count calculations"
		done
		n=$(($n+2000))
	done
done

#Now it is time to make the file to plot the data!
rm -f plotter
echo "set terminal png size 800,600" >> plotter
echo "set key ins vert"              >> plotter
echo "set key right top"             >> plotter


# Rage specific for memory and time and aux VARS
MaxMem=$( cat *.$LOGEXT | awk '{ print $1 }' | sort -nr | head -1 )
MaxMfl=$( cat *.$LOGEXT | awk '{ print $2 }' | sort -nr | head -1 )
MaxErr=$( cat *.$LOGEXT | awk '{ print $3 }' | sort -nr | head -1 )

FILES=(*.$LOGEXT)
NLOGS=$((${#FILES[@]}-1))
LASTF=${FILES[$NLOGS]}

## FIRST GRAPH
echo "set output \"MemoryUse.png\""     >> plotter
echo "set xrange [0: $MaxMem]"          >> plotter
echo "set yrange [0: $MaxMfl]"          >> plotter
echo "set xlabel \"Memory usage\""      >> plotter
echo "set ylabel \"Megaflops per Sec\"" >> plotter
echo " "                                >> plotter

echo "plot \\"                          >> plotter
for i in ${FILES[@]}
do
	if   [ "$i" = "$LASTF" ]
	then
		echo "\"$i\" using 1:2 with points" >> plotter
	else
		echo "\"$i\" using 1:2 with points, \\" >> plotter
	fi
done
if [ $MaxErr -eq 0]
then 
	exit 0
fi

## Second GRAPH This one should only check that everything is close
## to zero and that we're not making any mistakes
echo "set output \"checker.png\""       >> plotter
echo "set xrange [0: $MaxMem]"          >> plotter
echo "set yrange [0: $MaxErr]"          >> plotter
echo "set xlabel \"Memory usage\""      >> plotter
echo "set ylabel \"Max Error   \""      >> plotter


echo "plot \\"                          >> plotter
for i in ${FILES[@]}
do
	if   [ "$i" = "$LASTF" ]
	then
		echo "\"$i\" using 1:3 with linespoints"     >> plotter
	else
		echo "\"$i\" using 1:3 with linespoints, \\" >> plotter
	fi
done

gnuplot plotter


# time to say 'Good bye' ;-)
#
exit 0

